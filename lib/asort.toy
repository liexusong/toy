# $Id: asort.toy,v 1.1 2011/10/23 01:56:42 mit-sato Exp $

#
# asort: any sort
#
# Usage: asort (list)	gt: {| i1 i2 | (grater compare...)}
#			lt: {| i1 i2 | (less compare...)}
#			[order: > | <]
#
# For exsample:
#	asort ((1 9 3) (2 3 4) (3 2 1) (9 6 2)) gt: {| x y | $x,1 > $y,1} order: >
#

defun asort (l gt: gt-b lt: lt-b order: order) {
    set o [new];
    if {set? gt-b} then: {
	$o method > (d) {
	    yield $gt-b $var [$d get var];
	};
    };
    if {set? lt-b} then: {
	$o method < (d) {
	    yield $lt-b $var [$d get var];
	};
    };
    if {set? order} else: {set order >};

    [lsort [
	$l map {| i |
	    set x [new delegate: $o];
	    $x set! var $i;
	    result $x
	};
    ] order: $order] map {| i | $i get var} ;
};
